name: Build, Push, and Deploy Drupal

on:
  push:
    branches:
      # - main  # Trigger the workflow on push to the main branch
      - ssh-coonection-issue  # Trigger the workflow on push to the main branch

env:
  IMAGE_NAME: ssh-connectivity-test  # Name for the Docker image

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Determine Image Version
      id: image_version
      run: echo "VERSION=$(date +%Y%m%d%H%M)-${{ github.sha }}" >> $GITHUB_ENV

    - name: Print Secret Value
      run:  |
        echo "Secret Value: ${{ secrets.AZURE_CREDENTIALS }}"
        echo "registry: ${{ secrets.ACR_NAME }}"
        echo "password: ${{ secrets.ACR_PASSWORD }}"
        echo "username: ${{ secrets.ACR_USERNAME }}"

    - name: Log in to ACR
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    # - name: Build and Push Docker Image
    #   run: |
    #     docker build --no-cache -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} ./Docker
    #     docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.VERSION }} ./Docker
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # - name: Dump Database
    #   run: |
    #     # Replace with actual database dump command
    #     mysqldump --host=${{ secrets.DB_HOST }} --user=${{ secrets.DB_USER }} --password=${{ secrets.DB_PASSWORD }} ${{ secrets.DB_NAME }} > dump.sql

    # - name: Import Custom Database to Azure MySQL Flexible Server
    #   run: |
    #     # Use the custom dump file from the repository
    #     mysql --ssl-mode=REQUIRED --host=${{ secrets.DB_HOST }} --user=${{ secrets.DB_USER }} --password=${{ secrets.DB_PASSWORD }} ${{ secrets.DB_NAME }} < database/mysqlsampledatabase.sql

    # - name: Verify Database Import
    #   run: |
    #     # Run a simple query to verify data import
    #     echo "SHOW TABLES;" | mysql --ssl-mode=REQUIRED --host=${{ secrets.DB_HOST }} --user=${{ secrets.DB_USER }} --password=${{ secrets.DB_PASSWORD }} ${{ secrets.DB_NAME }}
      
    # - name: Log in to Azure
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}

    # - name: Deploy to Azure App Service
    #   uses: azure/webapps-deploy@v3
    #   with:
    #     app-name: ${{ secrets.APP_NAME }}
    #     # slot-name: production
    #     images: |
    #       ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

    # - name: Deploy to Azure App Service
    #   uses: azure/webapps-deploy@v3
    #   with:
    #     app-name: ${{ secrets.APP_NAME }}
    #     images: |
    #       ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
    